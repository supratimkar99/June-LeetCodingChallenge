//There are 2N people a company is planning to interview. 
//The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].

//Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.

class Solution {
    public int twoCitySchedCost(int[][] costs) 
    {
        int n = costs.length;
        int diff[] = new int[n];
        int mincost = 0,i=0;
        
        //assuming every person go to city A
        //diff[] stores the difference in fare between going to city B and City A
        for(int[] c : costs)
        {
            diff[i++] = c[1] - c[0];
            mincost += c[0];
        }
        
        Arrays.sort(diff); //sorting diff brings the greater decrease in fare in the first half
        for(i=0; i<n/2; i++)
        {
            mincost += diff[i]; 
            //the difference in fair gets adjusted for the half of passengers going to city B 
            //(the half of them whose fair going to cityB was less than that of cityA - as we sorted it)
        }
        
        return mincost;
        
    }
}
